BROKER SCHEMA gen
DECLARE ns13 NAMESPACE 'http://xmlns.hbc.com/CommonModules/PrinterLookupService/Types';
DECLARE ns NAMESPACE 'http://xmlns.hbc.com/CommonModules/PrinterLookupService';
DECLARE db NAMESPACE 'http://xmlns.oracle.com/pcbpel/adapter/db/GetPrinterInfo';


	    DECLARE ERROR_p_storeNo_ID 					CONSTANT CHARACTER 	'1000';
		DECLARE ERROR_p_storeNo_MSG 				CONSTANT CHARACTER 	'Input storeNo info is not provided';
		DECLARE errorMsg            CHARACTER;
		
CREATE COMPUTE MODULE retrievePrinterInfoByStore_Request_Response_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		DECLARE schemaName_fusion_db2,SCHEMA_NAME CHARACTER;
		DECLARE p_printerID,p_storeNo CHARACTER;
		SET p_printerID = InputRoot.XMLNSC.db:GetPrinterInfoInput.db:arg2;
		SET p_storeNo 	= InputRoot.XMLNSC.db:GetPrinterInfoInput.db:arg1;
		
				
			-- Create the request if the p_storeNo is populated
		IF (TRIM(p_storeNo) IS NULL OR TRIM(p_storeNo) ='' ) THEN
			SET Environment.variables.ERROR_msg_ID  = ERROR_p_storeNo_ID;
			SET Environment.variables.ERROR_msg_MSG = ERROR_p_storeNo_MSG;
			SET errorMsg =  ERROR_p_storeNo_MSG;
		    THROW USER EXCEPTION CATALOG 'RFS_PrinterLookup_p_storeNo_Validation' MESSAGE 1000 VALUES(errorMsg) ;
		END IF;
		
		SET SCHEMA_NAME = 'fusnusrq';
		DECLARE ZEBRA CHARACTER 'ZEBRA';
		DECLARE MONARCH_ID CHARACTER 'MONARCH ';
		DECLARE MONARCHID CHARACTER '0000';
--		select grp_cde as GroupCode, count(*) as Total from fusn_item_db.fusn_item_lookbook group by 1 order by 1
		
--		DECLARE sql_grp_cde CHARACTER 'SELECT PRINTER_ID, STOR_NUM, PRINTER_ID_CDE AS MONARCH_ID, PRINTER_TYP_CDE, PRINTER_IP_ADDR FROM TID001PRINTER  WHERE STOR_NUM = ?  and PRINTER_ID = ?' ;
		DECLARE sql_grp_cde CHARACTER 'SELECT a.PRINTER_ID, a.STOR_NUM, a.PRINTER_ID_CDE AS MONARCH_ID, a.PRINTER_TYP_CDE, a.PRINTER_IP_ADDR 
										FROM TID001PRINTER AS a
										WHERE STOR_NUM = ? AND RTRIM(PRINTER_ID) LIKE ? 
										AND PRINTER_TYP_CDE = ? 
										UNION SELECT b.PRINTER_ID, b.STOR_NUM,  b.PRINTER_ID_CDE AS MONARCH_ID, b.PRINTER_TYP_CDE, b.PRINTER_IP_ADDR FROM TID001PRINTER AS b WHERE STOR_NUM = ? AND RTRIM(PRINTER_ID) LIKE ? AND PRINTER_TYP_CDE = ? ORDER BY PRINTER_TYP_CDE' ;
--										UNION SELECT PRINTER_ID, STOR_NUM, 0000 AS MONARCH_ID , PRINTER_TYP_CDE, PRINTER_IP_ADDR FROM TID001PRINTER WHERE STOR_NUM = ? AND RTRIM(PRINTER_ID) LIKE ? AND PRINTER_TYP_CDE = ? ORDER BY PRINTER_TYP_CDE' ;
		SET Environment.variables.Test.Result[] = PASSTHRU(sql_grp_cde,p_storeNo,p_printerID,MONARCH_ID,p_storeNo,p_printerID,ZEBRA);
		
		-- generate output 
		DECLARE i INTEGER 1;
		DECLARE J INTEGER;
		   SET  J = CARDINALITY(Environment.variables.Test.Result[]); 
		While J >= i DO
		   SET OutputRoot.XMLNS.ns:PrinterLookupResponse.ns13:PrinterLookupDataList.ns13:PrinterLookupData[i].ns13:printerID 		=   Environment.variables.Test.Result[i].PRINTER_ID;
		   SET OutputRoot.XMLNS.ns:PrinterLookupResponse.ns13:PrinterLookupDataList.ns13:PrinterLookupData[i].ns13:storeNum         =   Environment.variables.Test.Result[i].STOR_NUM;
		   SET OutputRoot.XMLNS.ns:PrinterLookupResponse.ns13:PrinterLookupDataList.ns13:PrinterLookupData[i].ns13:printer 		    =   Environment.variables.Test.Result[i].MONARCH_ID;
		   SET OutputRoot.XMLNS.ns:PrinterLookupResponse.ns13:PrinterLookupDataList.ns13:PrinterLookupData[i].ns13:printerTypeCode  =   Environment.variables.Test.Result[i].PRINTER_TYP_CDE;
		   SET OutputRoot.XMLNS.ns:PrinterLookupResponse.ns13:PrinterLookupDataList.ns13:PrinterLookupData[i].ns13:printerIPAddress =   Environment.variables.Test.Result[i].PRINTER_IP_ADDR;
		   SET OutputRoot.XMLNS.ns:PrinterLookupResponse.ns13:PrinterLookupDataList.ns13:PrinterLookupData[i].ns13:severity 		= '';
		   SET OutputRoot.XMLNS.ns:PrinterLookupResponse.ns13:PrinterLookupDataList.ns13:PrinterLookupData[i].ns13:code 			= '';
		   SET OutputRoot.XMLNS.ns:PrinterLookupResponse.ns13:PrinterLookupDataList.ns13:PrinterLookupData[i].ns13:message 			= '';
		
		SET i = i + 1;	
		END WHILE;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;



